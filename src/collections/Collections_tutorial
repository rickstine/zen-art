What are Collections?
-Collections are like containers that hold multiple objects. Think of them as different types of storage boxes - some are ordered,
some prevent duplicates, some allow quick searching.

Why Use Collections?
-Dynamic sizing: Unlike arrays, collections can grow and shrink at runtime
-Type safety: Generics ensure compile-time type checking
-Rich functionality: Built-in methods for common operations
-Standardized interface: Consistent API across different collection types
-Performance optimization: Each collection type is optimized for specific use cases

Evolution of Collections
-Pre-Java 1.2: Vector, Hashtable, Stack, Properties
-Java 1.2 (JDK 1.2): Introduction of Collections Framework
-Java 1.5: Generics, Enhanced for-loop, Autoboxing
-Java 8: Stream API, Lambda expressions, Method references
-Java 9+: Factory methods, Immutable collections



The Collections Framework Hierarchy
Collection (Interface)
├── List (Interface)    - Lists store elements in order and allow duplicates.
│   ├── ArrayList  -Best for: Reading data frequently, random access
│   ├── LinkedList -Best for: Frequent insertions/deletions, queue operations
│   └── Vector - Similar to ArrayList but synchronized (thread-safe)
├── Set (Interface)  -Sets store unique elements (no duplicates).
│   ├── HashSet  - Best for: Fast lookups, no specific order needed (When you just need unique items (don't care about order))
│   ├── LinkedHashSet - Maintains insertion order
│   └── TreeSet -  Stores elements in sorted order
└── Queue (Interface)
    ├── LinkedList -In Java, Queue is an interface that represents a First-In-First-Out (FIFO) data structure. The LinkedList class is one of its most common implementations.
    └── PriorityQueue - Elements are ordered by priority (A PriorityQueue is a special type of queue where elements are ordered by priority, not just insertion order (like in a regular Queue).


Map (Interface) - Separate hierarchy (Maps store key-value pairs.Each key maps to at most one value, and keys must be unique. It is found in the java.util package.)
├── HashMap -Best for: Fast lookups, no specific order needed
├── LinkedHashMap - Maintains insertion order(Allows null keys and values)
└── TreeMap - stores key-value pairs in a sorted (ascending) order based on the keys.(Red-Black Tree is used internally (balanced binary search tree)

Common Operations
Most collections support these basic operations:

add() - Add an item
remove() - Remove an item
size() - Get number of items
contains() - Check if item exists
isEmpty() - Check if collection is empty


